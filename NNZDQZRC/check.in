#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
 
int main()
{
	vector<int> v = { 3,4,1,2,8 };
	// 先排序
	sort(v.begin(), v.end());  // 1 2 3 4 8
 
	// 定义两个迭代器变量
	vector<int>::iterator iter1;
	vector<int>::iterator iter2;
 
	// 在动态数组中寻找 >=3 出现的第一个数 并以迭代器的形式返回
	iter1 = lower_bound(v.begin(), v.end(), 3);  // -- 指向3
	// 在动态数组中寻找 >=7 出现的第一个数 并以迭代器的形式返回
	iter2 = lower_bound(v.begin(), v.end(), 7);  // -- 指向8
 
	cout << distance(v.begin(), iter1) << endl; //下标 2
	cout << distance(v.begin(), iter2) << endl; //下标 4 
	return 0;
}

// 自定义函数  
// 目的是 找出 大于等于 val 的元素
bool cmp(const int& e, const int& val)
{
	return e >= val;
}
 
 
int main()
{
 
	// 有序数组---从大到小
	vector<int> v = { 30,28,26,25,21,20,19,16,1 };
 
	// lower_bound 的目的：找出第一个 false 自定义函数的值---即 第 1 个 < 20 的元素
	vector<int>::iterator it = lower_bound(v.begin(), v.end(), 20, cmp);
	if (it == v.end())
		cout << "未找到满足条件的元素" << endl;
	else
	{
		cout << *it << endl;     // 找到的元素为：19
		cout << it - v.begin() << endl;  // 下标为：6
	}
	   
	return 0;
}

0
0
71
0
0
0
287
0
0
15
14
0
2
0
0
14
0
0
0
0
129
9
0
57
216
0
9
168
0
108
5
0
79
15
0
0
15
0
0
0
0
0
0
366
89
331
0
82
0
0
106
89
89
216
216
9
0
89
14
0
255
15
0
0
0
9
89
0
0
0
0
89
362
63
9
0
82
0
0
0
0
0
0
76
0
0
79
0
0
0
0
0
89
89
14
218
108
0
0
0
0
0
89
0
129
0
0
0
89
0
2
255
0
89
0
23
0
8
15
89
76
9
0
0
15
89
5
251
0
362
0
0
170
8
0
41
287
0
76
41
0
0
0
0
0
255
76
0
41
89
9
216
0
0
0
216
106
0
0
0
266
0
19
0
0
5
9
0
0
0
89
0
0
14
0
0
0
9
0
0
0
0
0
0
0
23
89
0
76
79
0
0
89
0
0
0
2
0
331
41
9
76
0
0
8
0
15
35
89
0
89
76
41
79
9
0
0
0
287
0
0
0
89
366
68
0
362
0
0
0
41
89
0
0
41
0
0
0
89
14
14
29
0
89
0
0
0
0
216
0
0
41
255
89
0
14
15
0
0
110
0
89
0
0
0
0
15
0
0
15
0
0
82
0
0
89
0
79
82
0
0
106
0
15
143
216
0
0
0
0
106
0
0
0
0
0
89
218
0
41
0
71
0
0
0
0
0
4
0
0
216
89
0
82
0
15
0
362
0
0
0
0
0
0
0
89
0
89
0
179
0
15
0
45
191
0
0
0
1
0
0
0
0
0
89
89
15
76
0
0
0
0
366
0
0
0
89
0
15
0
0
0
0
0
23
0
15
0
0
89
0
85
89
76
106